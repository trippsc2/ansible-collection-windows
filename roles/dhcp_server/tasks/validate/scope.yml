---
- name: Validate DHCP scope network ID is IPv4 address
  ansible.builtin.assert:
    that:
      - _dhcp_scope.id is ansible.utils.ipv4_address
    fail_msg: "The network ID address of the DHCP scope is not a valid IPv4 address. Value: {{ _dhcp_scope.ip_start }}"
    success_msg: The network ID address of the DHCP scope is a valid IPv4 address.

- name: Validate DHCP scope start is IPv4 address
  ansible.builtin.assert:
    that:
      - _dhcp_scope.ip_start is ansible.utils.ipv4_address
    fail_msg: "The start IP address of the DHCP scope is not a valid IPv4 address. Value: {{ _dhcp_scope.ip_start }}"
    success_msg: The start IP address of the DHCP scope is a valid IPv4 address.

- name: Validate DHCP scope end is IPv4 address
  ansible.builtin.assert:
    that:
      - _dhcp_scope.ip_end is ansible.utils.ipv4_address
    fail_msg: "The end IP address of the DHCP scope is not a valid IPv4 address. Value: {{ _dhcp_scope.ip_end }}"
    success_msg: The end IP address of the DHCP scope is valid.

- name: Validate DHCP scope subnet mask is IPv4 subnet mask
  ansible.builtin.assert:
    that:
      - _dhcp_scope.subnet_mask is ansible.utils.ipv4_netmask
    fail_msg: "The IPv4 subnet mask of the DHCP scope is not valid. Value: {{ _dhcp_scope.subnet_mask }}"
    success_msg: The IPv4 subnet mask of the DHCP scope is valid.

- name: Get CIDR bits of the subnet mask
  ansible.builtin.set_fact:
    _dhcp_scope_cidr_bits: >-
      {{ (_dhcp_scope.id |
          string + '/' + _dhcp_scope.subnet_mask |
          string) |
          ansible.utils.ipaddr('prefix') }}

- name: Validate DHCP scope network ID is a valid IPv4 network ID address
  ansible.builtin.assert:
    that:
      - _dhcp_scope.id + '/' + _dhcp_scope_cidr_bits == _dhcp_scope.id | ansible.utils.ipsubnet(_dhcp_scope_cidr_bits)
    fail_msg: "The network ID address is not the valid IPv4 network ID address for the subnet. Value: {{ _dhcp_scope.id }}/{{ _dhcp_scope_cidr_bits }} Expected: {{ _dhcp_scope.id | ansible.utils.ipsubnet(_dhcp_scope_cidr_bits) }}"
    success_msg: The network ID address is the valid IPv4 network ID address for the subnet.

- name: Validate DHCP scope start is within the IPv4 subnet
  ansible.builtin.assert:
    that:
      - _dhcp_scope.ip_start is ansible.utils.in_network (_dhcp_scope.id + '/' + _dhcp_scope_cidr_bits)
    fail_msg: "The start IP address of the DHCP scope is not within the subnet. Value: {{ _dhcp_scope.ip_start }} Expected: {{ _dhcp_scope.id | ansible.utils.ipsubnet(_dhcp_scope_cidr_bits) }}"
    success_msg: The start IP address of the DHCP scope is within the subnet.

- name: Validate DHCP scope end is within the IPv4 subnet
  ansible.builtin.assert:
    that:
      - _dhcp_scope.ip_end is ansible.utils.in_network (_dhcp_scope.id + '/' + _dhcp_scope_cidr_bits)
    fail_msg: "The end IP address of the DHCP scope is not within the subnet. Value: {{ _dhcp_scope.ip_end }} Expected: {{ _dhcp_scope.id | ansible.utils.ipsubnet(_dhcp_scope_cidr_bits) }}"
    success_msg: The end IP address of the DHCP scope is within the subnet.

- name: Validate DHCP scope option value is defined
  loop: "{{ _dhcp_scope.options }}"
  when:
    - item.ensure | default('Present') == 'Present'
  ansible.builtin.assert:
    that:
      - item.value is defined
    fail_msg: The value of the DHCP scope option is required when 'ensure' is set to 'Present'.
    success_msg: The value of the DHCP scope option is defined.
